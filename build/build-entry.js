const fs = require('fs-extra');
const path = require('path');
const uppercamelize = require('uppercamelcase');
const Components = require('./get-components')();
const packageJson = require('../package.json');

const version = process.env.VERSION || packageJson.version;
const tips = '// This file is auto generated by build/build-entry.js';

function format(name) {
  if (!name) return ''
  return 'min' + uppercamelize(name);
}

function buildEntry() {
  const uninstallComponents = [
    'Locale',
    'Lazyload',
    'Waterfall'
  ];

  const importList = Components.map(name => `import ${format(name)} from './${name}';`);
  const exportList = Components.map(name => `${format(name)}`);
  const installList = exportList.filter(name => !~uninstallComponents.indexOf(format(name)));
  const content = `${tips}
import { VueConstructor } from 'vue/types';
${importList.join('\n')}

declare global {
  interface Window {
    Vue?: VueConstructor;
  }
}

const version = '${version}';
const components: any = {
  ${installList.join(',\n  ')}
};

const install = (Vue: VueConstructor) => {
  console.log('com', components)
  Object.keys(components).forEach(key => {
    console.log('key', key)
    Vue.component(key, components[key])
  })
};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export {
  install,
  version,
  ${exportList.join(',\n  ')}
};

export default {
  install,
  version
};
`;

  fs.writeFileSync(path.join(__dirname, '../packages/index.ts'), content);
}

// components.forEach(Component => {
//   Vue.use(Component);
// });

buildEntry();
